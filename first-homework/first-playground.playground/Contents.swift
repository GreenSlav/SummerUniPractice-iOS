import Foundation

// –ø—Ä–æ—Ç–æ–∫–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≥–æ–Ω–∫–∏
protocol RaceCar {
    var maxSpeed: Float { get }
    var acceleration: Float { get }
    var handling: Float { get }
    
    func racePerformance() -> Float
}

// –±–∞–∑–æ–≤—ã–π(—Å—É–ø–µ—Ä) –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
class Car: RaceCar {
    var maxSpeed: Float = 0
    var acceleration: Float = 0
    var handling: Float = 0
    var brand: String
    var model: String
    private var _dateOfManufacture: Date?
    
    var dateOfManufacture: Int {
        get {
            let currentCalendar = Calendar.current
            
            if let dateToCheck = _dateOfManufacture {
                return currentCalendar.component(.year, from: dateToCheck)
            }
            
            // –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É –±—ã –∑–¥–µ—Å—å –º–æ–Ω–∞–¥—É —Å–¥–µ–ª–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ -1 - —ç—Ç–æ –∫–∞–∫-—Ç–æ –Ω–µ –æ—á–µ–Ω—å
            return -1 // –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ = nil
        }
        set(newValue) {
            var dateComponents = DateComponents() // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—à–µ–π –¥–∞—Ç—ã
            dateComponents.year = newValue // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
            let currentCalendar = Calendar.current // –ø–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            _dateOfManufacture = currentCalendar.date(from: dateComponents)
            // –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—à–µ–π –¥–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        }
    }
    
    init(_ brand: String, _ model: String, _ dateOfManufacture: Int) {
        self.brand = brand
        self.model = model
        self.dateOfManufacture = dateOfManufacture
    }
    
    func getInformation() -> Void {
        print("Brand: \(self.brand)")
        print("Model: \(self.model)")
        print("Date of Manufacture: \(self.dateOfManufacture)")
    }
    
    func racePerformance() -> Float {
        return maxSpeed / acceleration * handling
    }
}

class Bmw: Car {
    var enginePower: Double
    var fuelConsumption: Double
    
    init(brand: String, model: String, dateOfManufacture: Int, enginePower: Double, fuelConsumption: Double) {
        self.enginePower = enginePower
        self.fuelConsumption = fuelConsumption
        super.init(brand, model, dateOfManufacture) // –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ(—Å—É–ø–µ—Ä) –∫–ª–∞—Å—Å–∞
        maxSpeed = 280;
        acceleration = 3.2
        handling = 0.85
    }
    
    override func getInformation() -> Void {
        super.getInformation() // –≤—ã–∑—ã–≤–∞–µ–º –ù–ï–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ(—Å—É–ø–µ—Ä) –∫–ª–∞—Å—Å–∞
        print("Engine Power: \(self.enginePower) HP")
        print("Fuel Consumption: \(self.fuelConsumption) L/100km")
    }
}

class Mercedes: Car {
    var enginePower: Double
    var fuelConsumption: Double
    
    init(brand: String, model: String, dateOfManufacture: Int, enginePower: Double, fuelConsumption: Double) {
        self.enginePower = enginePower
        self.fuelConsumption = fuelConsumption
        super.init(brand, model, dateOfManufacture)
        maxSpeed = 290;
        acceleration = 3.5
        handling = 0.8
    }
    
    override func getInformation() -> Void {
        super.getInformation()
        print("Engine Power: \(self.enginePower) HP")
        print("Fuel Consumption: \(self.fuelConsumption) L/100km")
    }
}

class Toyota: Car {
    var enginePower: Double
    var fuelConsumption: Double
    
    init(brand: String, model: String, dateOfManufacture: Int, enginePower: Double, fuelConsumption: Double) {
        self.enginePower = enginePower
        self.fuelConsumption = fuelConsumption
        super.init(brand, model, dateOfManufacture)
        maxSpeed = 230;
        acceleration = 5.7
        handling = 0.95
    }
    
    override func getInformation() -> Void {
        super.getInformation()
        print("Engine Power: \(self.enginePower) HP")
        print("Fuel Consumption: \(self.fuelConsumption) L/100km")
    }
}

class Moskvich: Car {
    var enginePower: Double
    var fuelConsumption: Double
    
    init(brand: String, model: String, dateOfManufacture: Int, enginePower: Double, fuelConsumption: Double) {
        print("Ay, ay, ay I'm your little butterfly üá®üá≥")
        self.enginePower = enginePower
        self.fuelConsumption = fuelConsumption
        super.init(brand, model, dateOfManufacture)
        maxSpeed = 200;
        acceleration = 7.9
        handling = 0.62
    }
    
    override func getInformation() -> Void {
        print("The bluetooth device is ready to pair üó£üó£üó£")
        super.getInformation()
        print("Engine Power: \(self.enginePower) HP")
        print("Fuel Consumption: \(self.fuelConsumption) L/100km")
    }
}

// –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–æ–∑–¥–∞–¥–∏–º enum
enum CarType {
    case Bmw
    case Mercedes
    case Toyota
    case Moskvich
}

class CarFactory {
    static func createCar(type: CarType, brand: String, model: String, dateOfManufacture: Int, enginePower: Double, fuelConsumption: Double) -> Car {
        switch type {
        case .Bmw:
            return Bmw(brand: brand, model: model, dateOfManufacture: dateOfManufacture, enginePower: enginePower, fuelConsumption: fuelConsumption)
        case .Mercedes:
            return Mercedes(brand: brand, model: model, dateOfManufacture: dateOfManufacture, enginePower: enginePower, fuelConsumption: fuelConsumption)
        case .Toyota:
            return Toyota(brand: brand, model: model, dateOfManufacture: dateOfManufacture, enginePower: enginePower, fuelConsumption: fuelConsumption)
        case .Moskvich:
            return Moskvich(brand: brand, model: model, dateOfManufacture: dateOfManufacture, enginePower: enginePower, fuelConsumption: fuelConsumption)
        }
    }
}

// —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–æ–º–æ—â—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
let car1 = CarFactory.createCar(type: .Bmw, brand: "BMW", model: "M3", dateOfManufacture: 2020, enginePower: 480, fuelConsumption: 10)
let car2 = CarFactory.createCar(type: .Mercedes, brand: "Mercedes-Benz", model: "C63", dateOfManufacture: 2019, enginePower: 503, fuelConsumption: 11)
let car3 = CarFactory.createCar(type: .Toyota, brand: "Toyota", model: "Camry", dateOfManufacture: 2021, enginePower: 335, fuelConsumption: 8)
let car4 = CarFactory.createCar(type: .Moskvich, brand: "Moskvich", model: "Chin-Chan-Chun", dateOfManufacture: 1980, enginePower: 75, fuelConsumption: 15)

// –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–æ–∫ –º–µ–∂–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
func doCarRace(cars: Car ...)
{
    let listOfWinners = cars.sorted { $0.racePerformance() > $1.racePerformance() } // –∑–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–º—ã–∫–∞–Ω–∏–µ(closure), –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é .racePerformance()
    
    print("Place - Car")
    for (index, car) in listOfWinners.enumerated() {
        print("\(index + 1) - \(car.brand)")
    }
}

var listOfCars: [Car] = [car1, car2, car3, car4]

// –≥–æ–Ω–∫–∞ –≤—Å–µ—Ö —Å–æ –≤—Å–µ–º–∏
doCarRace(cars: car1, car2, car3, car4)

print()

// –≥–æ–Ω–∫–∞ –ø–∞—Ä–∞–º–∏
for (index1, car1) in listOfCars.enumerated() {
    for (index2, car2) in listOfCars.enumerated() {
        if index1 != index2 && index1 < index2 { // —á—Ç–æ–± –≥–æ–Ω–æ–∫-—Ä–µ–≤–∞–Ω—à–µ–π –Ω–µ –±—ã–ª–æ
            print("Race is starting...")
            doCarRace(cars: car1, car2)
            print("Race finished", terminator: "\n\n")
        }
    }
}
